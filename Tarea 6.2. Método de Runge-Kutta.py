# -*- coding: utf-8 -*-
"""metodosnum.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p1frPrWujPtyVUL4RY_QnVQxEVESLGBl
"""

#EJERCICIO 1
import numpy as np
import matplotlib.pyplot as plt

# Definición de la EDO: dT/dx = -0.25(T - 25)
def f(x, T):
    return -0.25 * (T - 25)

# Método de Runge-Kutta de cuarto orden
def runge_kutta_4(f, x0, T0, x_end, h):
    x_vals = [x0]
    T_vals = [T0]

    x = x0
    T = T0

    print(f"{'x':>6} {'T numérica':>12} {'T exacta':>12} {'Error':>10}")

    while x < x_end:
        # Solución exacta para comparación
        T_exact = 25 + 75 * np.exp(-0.25 * x)
        error = abs(T - T_exact)
        print(f"{x:6.2f} {T:12.6f} {T_exact:12.6f} {error:10.6f}")

        # Método RK4
        k1 = f(x, T)
        k2 = f(x + h/2, T + h/2 * k1)
        k3 = f(x + h/2, T + h/2 * k2)
        k4 = f(x + h, T + h * k3)

        T += h * (k1 + 2*k2 + 2*k3 + k4) / 6
        x += h

        x_vals.append(x)
        T_vals.append(T)

    return x_vals, T_vals

# Parámetros iniciales
x0 = 0
T0 = 100
x_end = 2
h = 0.1

# Llamada al método de Runge-Kutta
x_vals, T_vals = runge_kutta_4(f, x0, T0, x_end, h)

# Solución exacta para graficar
T_exact_vals = [25 + 75 * np.exp(-0.25 * x) for x in x_vals]

# Gráfica comparativa
plt.figure(figsize=(8,5))
plt.plot(x_vals, T_vals, 'bo-', label="Solución Numérica (RK4)")
plt.plot(x_vals, T_exact_vals, 'r--', label="Solución Exacta")
plt.xlabel("x (m)")
plt.ylabel("T (°C)")
plt.title("Perfil de temperatura a lo largo del tubo")
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()



#EJERCICIO 2
import numpy as np
import matplotlib.pyplot as plt

# Parámetros del circuito
V = 10       # Voltios
R = 1000     # Ohms
C = 0.001    # Faradios

# EDO: dq/dt = (V - q/C) / R
def f(t, q):
    return (V - q / C) / R

# Método Runge-Kutta 4
def runge_kutta_4(f, t0, q0, t_end, h):
    t_vals = [t0]
    q_vals = [q0]

    t = t0
    q = q0

    print(f"{'t':>6} {'q numérica':>12} {'q exacta':>12} {'Error':>10}")

    while t < t_end + 1e-9:
        # Solución exacta: q(t) = C*V*(1 - exp(-t/(RC)))
        q_exact = C * V * (1 - np.exp(-t / (R * C)))
        error = abs(q - q_exact)
        print(f"{t:6.2f} {q:12.6f} {q_exact:12.6f} {error:10.6f}")

        k1 = f(t, q)
        k2 = f(t + h/2, q + h/2 * k1)
        k3 = f(t + h/2, q + h/2 * k2)
        k4 = f(t + h, q + h * k3)

        q += h * (k1 + 2*k2 + 2*k3 + k4) / 6
        t += h

        t_vals.append(t)
        q_vals.append(q)

    return t_vals, q_vals

# Parámetros iniciales
t0 = 0
q0 = 0
t_end = 1
h = 0.05

# Ejecutar método de Runge-Kutta
t_vals, q_vals = runge_kutta_4(f, t0, q0, t_end, h)

# Solución exacta para graficar
q_exact_vals = [C * V * (1 - np.exp(-t / (R * C))) for t in t_vals]

# Graficar
plt.figure(figsize=(8,5))
plt.plot(t_vals, q_vals, 'bo-', label='Solución Numérica (RK4)')
plt.plot(t_vals, q_exact_vals, 'r--', label='Solución Exacta')
plt.xlabel("t (s)")
plt.ylabel("q (C)")
plt.title("Carga del capacitor en un circuito RC")
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()



#EJERCICIO 3
import numpy as np
import matplotlib.pyplot as plt

# Sistema de ecuaciones diferenciales
def f(t, Y):
    y1, y2 = Y
    dy1dt = y2
    dy2dt = -2*y2 - 5*y1
    return np.array([dy1dt, dy2dt])

# Método de Runge-Kutta 4 para sistemas
def runge_kutta_sistema(f, t0, Y0, t_end, h):
    t_vals = [t0]
    Y_vals = [Y0]

    t = t0
    Y = Y0

    print(f"{'t':>5} {'y1 (posición)':>15} {'y2 (velocidad)':>17}")

    while t < t_end + 1e-9:
        print(f"{t:5.2f} {Y[0]:15.6f} {Y[1]:17.6f}")

        k1 = f(t, Y)
        k2 = f(t + h/2, Y + h/2 * k1)
        k3 = f(t + h/2, Y + h/2 * k2)
        k4 = f(t + h, Y + h * k3)

        Y += h * (k1 + 2*k2 + 2*k3 + k4) / 6
        t += h

        t_vals.append(t)
        Y_vals.append(Y.copy())

    return np.array(t_vals), np.array(Y_vals)

# Condiciones iniciales
t0 = 0
t_end = 5
h = 0.1
Y0 = np.array([1, 0])  # y1(0) = 1, y2(0) = 0

# Ejecutar el método
t_vals, Y_vals = runge_kutta_sistema(f, t0, Y0, t_end, h)

# Graficar posición
plt.figure(figsize=(8,5))
plt.plot(t_vals, Y_vals[:,0], 'b-', label='Posición $y_1(t)$')
plt.plot(t_vals, Y_vals[:,1], 'r--', label='Velocidad $y_2(t)$')
plt.title("Dinámica del resorte amortiguado")
plt.xlabel("Tiempo t (s)")
plt.ylabel("Magnitud")
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()