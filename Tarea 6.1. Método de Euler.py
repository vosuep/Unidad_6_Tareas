# -*- coding: utf-8 -*-
"""metodosnum.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p1frPrWujPtyVUL4RY_QnVQxEVESLGBl
"""

#EJERCICIO 1
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Parámetros del problema
R = 1000        # Ohmios
C = 0.001       # Faradios
V_fuente = 5    # Voltios
V0 = 0          # Condición inicial
t0 = 0
tf = 5
n = 20

# Paso de integración
h = (tf - t0) / n

# Función que define la EDO: dV/dt = (V_fuente - V) / (R * C)
def f(t, V):
    return (V_fuente - V) / (R * C)

# Método de Euler
t_vals = [t0]
V_vals = [V0]
t = t0
V = V0

for i in range(n):
    V = V + h * f(t, V)
    t = t + h
    t_vals.append(t)
    V_vals.append(V)

# Solución analítica
t_exact = np.linspace(t0, tf, 200)
V_exact = V_fuente * (1 - np.exp(-t_exact / (R * C)))

# Guardar resultados en CSV
data = {
    "t": t_vals,
    "V_aproximado": V_vals
}
df = pd.DataFrame(data)
csv_path = "carga_capacitor_euler.csv"
df.to_csv(csv_path, index=False)

# Graficar resultados
plt.figure(figsize=(10, 6))
plt.plot(t_vals, V_vals, 'o-', label='Solución Aproximada (Euler)', color='blue')
plt.plot(t_exact, V_exact, '-', label='Solución Analítica', color='red')
plt.title("Carga de un Capacitor en un Circuito RC")
plt.xlabel("Tiempo (s)")
plt.ylabel("Voltaje (V)")
plt.grid(True)
plt.legend()
image_path = "carga_capacitor_grafica.png"
plt.savefig(image_path)
plt.show()




#EJERCICIO 2
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Parámetros del sistema
g = 9.81        # m/s^2
m = 2           # kg
k = 0.5         # kg/s
v0 = 0          # Condición inicial
t0 = 0
tf = 10
n = 50

# Paso de integración
h = (tf - t0) / n

# EDO: dv/dt = g - (k/m)*v
def f(t, v):
    return g - (k/m) * v

# Método de Euler
t_vals = [t0]
v_vals = [v0]
t = t0
v = v0

for i in range(n):
    v = v + h * f(t, v)
    t = t + h
    t_vals.append(t)
    v_vals.append(v)

# Solución exacta
t_exact = np.linspace(t0, tf, 200)
v_exact = (m * g / k) * (1 - np.exp(-(k/m) * t_exact))

# Guardar resultados en CSV
data = {
    "t": t_vals,
    "v_aproximada": v_vals
}
df = pd.DataFrame(data)
csv_path = "caida_libre_euler.csv"
df.to_csv(csv_path, index=False)

# Graficar comparación
plt.figure(figsize=(10, 6))
plt.plot(t_vals, v_vals, 'o-', label='Solución Aproximada (Euler)', color='blue')
plt.plot(t_exact, v_exact, '-', label='Solución Exacta', color='green')
plt.title("Caída Libre con Resistencia del Aire")
plt.xlabel("Tiempo (s)")
plt.ylabel("Velocidad (m/s)")
plt.grid(True)
plt.legend()
image_path = "caida_libre_grafica.png"
plt.savefig(image_path)
plt.show()




#EJERCICIO 3
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Parámetros
T0 = 90            # Temperatura inicial
Tamb = 25          # Temperatura ambiente
k = 0.07           # Constante de enfriamiento
t0 = 0
tf = 30
n = 30             # Número de pasos

# Paso de integración
h = (tf - t0) / n

# EDO: dT/dt = -k(T - Tamb)
def f(t, T):
    return -k * (T - Tamb)

# Método de Euler
t_vals = [t0]
T_vals = [T0]
t = t0
T = T0

for i in range(n):
    T = T + h * f(t, T)
    t = t + h
    t_vals.append(t)
    T_vals.append(T)

# Solución exacta
t_exact = np.linspace(t0, tf, 300)
T_exact = Tamb + (T0 - Tamb) * np.exp(-k * t_exact)

# Guardar resultados
data = {
    "t": t_vals,
    "T_aproximada": T_vals
}
df = pd.DataFrame(data)
csv_path = "enfriamiento_euler.csv"
df.to_csv(csv_path, index=False)

# Gráfica
plt.figure(figsize=(10, 6))
plt.plot(t_vals, T_vals, 'o-', label='Solución Aproximada (Euler)', color='blue')
plt.plot(t_exact, T_exact, '-', label='Solución Exacta', color='red')
plt.title("Ley de Enfriamiento de Newton")
plt.xlabel("Tiempo (min)")
plt.ylabel("Temperatura (°C)")
plt.grid(True)
plt.legend()
image_path = "enfriamiento_grafica.png"
plt.savefig(image_path)
plt.show()